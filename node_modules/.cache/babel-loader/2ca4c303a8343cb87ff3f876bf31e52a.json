{"ast":null,"code":"class Engine {\n  constructor() {\n    this.number = \"\";\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n    this.OperationEnum = {\n      addition: \"+\",\n      subtraction: \"-\",\n      multiplication: \"x\",\n      division: \"\\u00F7\",\n      percentage: \"%\",\n      sign: \"+/-\",\n      equal: \"=\",\n      allClear: \"AC\",\n      allClear: \"C\"\n    };\n  }\n\n  updatePreviousStatus(number, input) {\n    this.previousNumber = number;\n    this.previousInput = input;\n    this.previousOperation = input;\n  } // Handle and process all digit inputs including .\n\n\n  handleDigitInput(input) {\n    this.clearable = true;\n\n    if (this.isOperation(this.previousInput)) {\n      this.number = \"\";\n    }\n\n    if (input === \".\" && this.containDecimalPoint(this.number)) {\n      return this.number;\n    }\n\n    if (input === \".\" && this.number === \"\") {\n      this.number = \"0.\";\n      return this.number;\n    }\n\n    this.number += input;\n    this.previousInput = input;\n    return this.removeZero(this.number);\n  } // Handle all operation other than digit inputs.\n\n\n  handleOperationInput(input) {\n    if (input === this.OperationEnum.addition || input === this.OperationEnum.subtraction || input === this.OperationEnum.multiplication || input === this.OperationEnum.division) {\n      return this.handleBaiscMathOperation(input);\n    }\n\n    if (input === this.OperationEnum.percentage) {\n      return this.handlePercentageOperation();\n    }\n\n    if (input === this.OperationEnum.sign) {\n      return this.handleSignOperation();\n    }\n\n    if (input === this.OperationEnum.allClear) {\n      return this.handleAllClearOperation();\n    }\n\n    if (input === this.OperationEnum.clear) {\n      return this.handleClearOperation();\n    }\n\n    if (input === this.OperationEnum.equal) {\n      return this.handleEqualOperation(input);\n    }\n  } // Only handle basic +, -, /, x operations\n\n\n  handleBaiscMathOperation(input) {\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n\n    if (this.previousNumber == null) {\n      this.updatePreviousStatus(this.number, input);\n      return this.number;\n    } else {\n      let temp = this.previousInput;\n      this.previousInput = input;\n\n      if (temp !== input && this.previousOperation !== this.OperationEnum.equal && temp !== \"=\") {\n        if (this.previousOperation === this.OperationEnum.addition) {\n          this.number = this.add(this.previousNumber, this.number);\n        }\n\n        if (this.previousOperation === this.OperationEnum.subtraction) {\n          this.number = this.subtract(this.previousNumber, this.number);\n        }\n\n        if (this.previousOperation === this.OperationEnum.multiplication) {\n          this.number = this.muliply(this.previousNumber, this.number);\n        }\n\n        if (this.previousOperation === this.OperationEnum.division) {\n          this.number = this.divide(this.previousNumber, this.number);\n        }\n\n        this.updatePreviousStatus(this.number, input);\n        return this.number;\n      } else {\n        this.updatePreviousStatus(this.number, input);\n        return this.number;\n      }\n    }\n  }\n\n  handlePercentageOperation() {\n    if (this.number === \"\") {\n      this.number = \"0\";\n    }\n\n    this.number = this.percentage(this.number);\n    return this.number;\n  }\n\n  handleSignOperation() {\n    if (this.number === \"\") {\n      this.number = \"0\";\n    }\n\n    this.number = this.changeSign(this.number);\n    return this.number;\n  }\n\n  handleAllClearOperation() {\n    return this.allClear();\n  }\n\n  handleClearOperation() {\n    return this.clear();\n  } // Paramter operation is one of add, subtract, multiply or divide\n\n\n  perform(operation) {\n    if (this.repeatNumber !== null) {\n      this.number = operation(this.number, this.repeatNumber);\n    } else {\n      this.repeatNumber = this.number;\n      this.number = operation(this.previousNumber, this.number);\n    }\n  }\n\n  handleEqualOperation(input) {\n    if (this.previousNumber == null) {\n      this.updatePreviousStatus(this.number, input);\n      return this.number;\n    } else {\n      this.previousInput = input;\n\n      if (this.previousOperation !== this.OperationEnum.equal && input === this.OperationEnum.equal) {\n        let temp = this.number;\n\n        if (this.previousOperation === this.OperationEnum.addition) {\n          this.perform(this.add);\n        }\n\n        if (this.previousOperation === this.OperationEnum.subtraction) {\n          this.perform(this.subtract);\n        }\n\n        if (this.previousOperation === this.OperationEnum.multiplication) {\n          this.perform(this.muliply);\n        }\n\n        if (this.previousOperation === this.OperationEnum.division) {\n          this.perform(this.divide);\n        }\n\n        this.repeatNumber = temp;\n        this.repeatOperation = this.previousOperation;\n        this.previousInput = input;\n        this.previousOperation = input;\n        return this.number;\n      } else {\n        let temp = this.number;\n\n        if (this.repeatNumber != null) {\n          if (this.repeatOperation === this.OperationEnum.addition) {\n            this.number = this.add(this.number, this.repeatNumber);\n          }\n\n          if (this.repeatOperation === this.OperationEnum.subtraction) {\n            this.number = this.subtract(this.number, this.repeatNumber);\n          }\n\n          if (this.repeatOperation === this.OperationEnum.multiplication) {\n            this.number = this.muliply(this.number, this.repeatNumber);\n          }\n\n          if (this.repeatOperation === this.OperationEnum.division) {\n            this.number = this.divide(this.number, this.repeatNumber);\n          }\n        }\n\n        this.updatePreviousStatus(temp, input);\n        return this.number;\n      }\n    }\n  }\n\n  calculate(input) {\n    if (this.isDigit(input)) {\n      return this.handleDigitInput(input);\n    }\n\n    if (this.isOperation(input)) {\n      return this.handleOperationInput(input);\n    }\n\n    return \"Error\";\n  }\n\n  isDigit(input) {\n    return !isNaN(input) || input === \".\";\n  }\n\n  isOperation(input) {\n    return Object.values(this.OperationEnum).includes(input);\n  }\n\n  add(previousNumber, number) {\n    return (parseFloat(previousNumber) + parseFloat(number)).toString();\n  }\n\n  subtract(previousNumber, number) {\n    return (parseFloat(previousNumber) - parseFloat(number)).toString();\n  }\n\n  muliply(previousNumber, number) {\n    return (parseFloat(previousNumber) * parseFloat(number)).toString();\n  }\n\n  divide(previousNumber, number) {\n    return (parseFloat(previousNumber) / parseFloat(number)).toString();\n  }\n\n  percentage(number) {\n    return (parseFloat(number) / 100).toString();\n  }\n\n  changeSign(number) {\n    return parseFloat(number) === 0 ? \"0\" : (parseFloat(number) * -1).toString();\n  }\n\n  clear() {\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n    return this.number;\n  }\n\n  allClear() {\n    this.number = \"\";\n    this.previousInput = null;\n    this.previousNumber = null;\n    this.previousOperation = null;\n    this.repeatNumber = null;\n    this.repeatOperation = null;\n    this.clearable = false;\n    return \"0\";\n  }\n\n  removeZero(number) {\n    if (number.length > 1 && number[0] === \"0\" && number[1] !== \".\") {\n      return this.removeZero(number.substr(1, number.length));\n    }\n\n    return number;\n  }\n\n  containDecimalPoint(number) {\n    return number.includes(\".\");\n  }\n\n}\n\nexport default Engine;","map":{"version":3,"sources":["/Users/raza/Downloads/khadyo_source_code/client/src/resources/restaurant/auth/pos/calc/Engine.js"],"names":["Engine","constructor","number","previousInput","previousNumber","previousOperation","repeatNumber","repeatOperation","clearable","OperationEnum","addition","subtraction","multiplication","division","percentage","sign","equal","allClear","updatePreviousStatus","input","handleDigitInput","isOperation","containDecimalPoint","removeZero","handleOperationInput","handleBaiscMathOperation","handlePercentageOperation","handleSignOperation","handleAllClearOperation","clear","handleClearOperation","handleEqualOperation","temp","add","subtract","muliply","divide","changeSign","perform","operation","calculate","isDigit","isNaN","Object","values","includes","parseFloat","toString","length","substr"],"mappings":"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","sourcesContent":["class Engine {\r\n  constructor() {\r\n    this.number = \"\";\r\n\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    this.OperationEnum = {\r\n      addition: \"+\",\r\n      subtraction: \"-\",\r\n      multiplication: \"x\",\r\n      division: \"\\u00F7\",\r\n      percentage: \"%\",\r\n      sign: \"+/-\",\r\n      equal: \"=\",\r\n      allClear: \"AC\",\r\n      allClear: \"C\",\r\n    };\r\n  }\r\n\r\n  updatePreviousStatus(number, input) {\r\n    this.previousNumber = number;\r\n    this.previousInput = input;\r\n    this.previousOperation = input;\r\n  }\r\n\r\n  // Handle and process all digit inputs including .\r\n  handleDigitInput(input) {\r\n    this.clearable = true;\r\n\r\n    if (this.isOperation(this.previousInput)) {\r\n      this.number = \"\";\r\n    }\r\n\r\n    if (input === \".\" && this.containDecimalPoint(this.number)) {\r\n      return this.number;\r\n    }\r\n\r\n    if (input === \".\" && this.number === \"\") {\r\n      this.number = \"0.\";\r\n      return this.number;\r\n    }\r\n\r\n    this.number += input;\r\n\r\n    this.previousInput = input;\r\n\r\n    return this.removeZero(this.number);\r\n  }\r\n\r\n  // Handle all operation other than digit inputs.\r\n  handleOperationInput(input) {\r\n    if (\r\n      input === this.OperationEnum.addition ||\r\n      input === this.OperationEnum.subtraction ||\r\n      input === this.OperationEnum.multiplication ||\r\n      input === this.OperationEnum.division\r\n    ) {\r\n      return this.handleBaiscMathOperation(input);\r\n    }\r\n\r\n    if (input === this.OperationEnum.percentage) {\r\n      return this.handlePercentageOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.sign) {\r\n      return this.handleSignOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.allClear) {\r\n      return this.handleAllClearOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.clear) {\r\n      return this.handleClearOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.equal) {\r\n      return this.handleEqualOperation(input);\r\n    }\r\n  }\r\n\r\n  // Only handle basic +, -, /, x operations\r\n  handleBaiscMathOperation(input) {\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n\r\n    if (this.previousNumber == null) {\r\n      this.updatePreviousStatus(this.number, input);\r\n\r\n      return this.number;\r\n    } else {\r\n      let temp = this.previousInput;\r\n      this.previousInput = input;\r\n\r\n      if (\r\n        temp !== input &&\r\n        this.previousOperation !== this.OperationEnum.equal &&\r\n        temp !== \"=\"\r\n      ) {\r\n        if (this.previousOperation === this.OperationEnum.addition) {\r\n          this.number = this.add(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.subtraction) {\r\n          this.number = this.subtract(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.multiplication) {\r\n          this.number = this.muliply(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.division) {\r\n          this.number = this.divide(this.previousNumber, this.number);\r\n        }\r\n\r\n        this.updatePreviousStatus(this.number, input);\r\n\r\n        return this.number;\r\n      } else {\r\n        this.updatePreviousStatus(this.number, input);\r\n\r\n        return this.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePercentageOperation() {\r\n    if (this.number === \"\") {\r\n      this.number = \"0\";\r\n    }\r\n\r\n    this.number = this.percentage(this.number);\r\n\r\n    return this.number;\r\n  }\r\n\r\n  handleSignOperation() {\r\n    if (this.number === \"\") {\r\n      this.number = \"0\";\r\n    }\r\n\r\n    this.number = this.changeSign(this.number);\r\n\r\n    return this.number;\r\n  }\r\n\r\n  handleAllClearOperation() {\r\n    return this.allClear();\r\n  }\r\n\r\n  handleClearOperation() {\r\n    return this.clear();\r\n  }\r\n\r\n  // Paramter operation is one of add, subtract, multiply or divide\r\n  perform(operation) {\r\n    if (this.repeatNumber !== null) {\r\n      this.number = operation(this.number, this.repeatNumber);\r\n    } else {\r\n      this.repeatNumber = this.number;\r\n      this.number = operation(this.previousNumber, this.number);\r\n    }\r\n  }\r\n\r\n  handleEqualOperation(input) {\r\n    if (this.previousNumber == null) {\r\n      this.updatePreviousStatus(this.number, input);\r\n\r\n      return this.number;\r\n    } else {\r\n      this.previousInput = input;\r\n\r\n      if (\r\n        this.previousOperation !== this.OperationEnum.equal &&\r\n        input === this.OperationEnum.equal\r\n      ) {\r\n        let temp = this.number;\r\n\r\n        if (this.previousOperation === this.OperationEnum.addition) {\r\n          this.perform(this.add);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.subtraction) {\r\n          this.perform(this.subtract);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.multiplication) {\r\n          this.perform(this.muliply);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.division) {\r\n          this.perform(this.divide);\r\n        }\r\n\r\n        this.repeatNumber = temp;\r\n        this.repeatOperation = this.previousOperation;\r\n        this.previousInput = input;\r\n        this.previousOperation = input;\r\n\r\n        return this.number;\r\n      } else {\r\n        let temp = this.number;\r\n\r\n        if (this.repeatNumber != null) {\r\n          if (this.repeatOperation === this.OperationEnum.addition) {\r\n            this.number = this.add(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.subtraction) {\r\n            this.number = this.subtract(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.multiplication) {\r\n            this.number = this.muliply(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.division) {\r\n            this.number = this.divide(this.number, this.repeatNumber);\r\n          }\r\n        }\r\n\r\n        this.updatePreviousStatus(temp, input);\r\n\r\n        return this.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  calculate(input) {\r\n    if (this.isDigit(input)) {\r\n      return this.handleDigitInput(input);\r\n    }\r\n\r\n    if (this.isOperation(input)) {\r\n      return this.handleOperationInput(input);\r\n    }\r\n\r\n    return \"Error\";\r\n  }\r\n\r\n  isDigit(input) {\r\n    return !isNaN(input) || input === \".\";\r\n  }\r\n\r\n  isOperation(input) {\r\n    return Object.values(this.OperationEnum).includes(input);\r\n  }\r\n\r\n  add(previousNumber, number) {\r\n    return (parseFloat(previousNumber) + parseFloat(number)).toString();\r\n  }\r\n\r\n  subtract(previousNumber, number) {\r\n    return (parseFloat(previousNumber) - parseFloat(number)).toString();\r\n  }\r\n\r\n  muliply(previousNumber, number) {\r\n    return (parseFloat(previousNumber) * parseFloat(number)).toString();\r\n  }\r\n\r\n  divide(previousNumber, number) {\r\n    return (parseFloat(previousNumber) / parseFloat(number)).toString();\r\n  }\r\n\r\n  percentage(number) {\r\n    return (parseFloat(number) / 100).toString();\r\n  }\r\n\r\n  changeSign(number) {\r\n    return parseFloat(number) === 0\r\n      ? \"0\"\r\n      : (parseFloat(number) * -1).toString();\r\n  }\r\n\r\n  clear() {\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    return this.number;\r\n  }\r\n\r\n  allClear() {\r\n    this.number = \"\";\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    return \"0\";\r\n  }\r\n\r\n  removeZero(number) {\r\n    if (number.length > 1 && number[0] === \"0\" && number[1] !== \".\") {\r\n      return this.removeZero(number.substr(1, number.length));\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  containDecimalPoint(number) {\r\n    return number.includes(\".\");\r\n  }\r\n}\r\n\r\nexport default Engine;\r\n"]},"metadata":{},"sourceType":"module"}