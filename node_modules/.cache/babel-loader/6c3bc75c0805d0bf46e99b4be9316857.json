{"ast":null,"code":"import _defineProperty from\"/Users/raza/Downloads/khadyo_source_code/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _classCallCheck from\"/Users/raza/Downloads/khadyo_source_code/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/raza/Downloads/khadyo_source_code/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";var Engine=/*#__PURE__*/function(){function Engine(){_classCallCheck(this,Engine);this.number=\"\";this.previousInput=null;this.previousNumber=null;this.previousOperation=null;this.repeatNumber=null;this.repeatOperation=null;this.clearable=false;this.OperationEnum=_defineProperty({addition:\"+\",subtraction:\"-\",multiplication:\"x\",division:\"\\xF7\",percentage:\"%\",sign:\"+/-\",equal:\"=\",allClear:\"AC\"},\"allClear\",\"C\");}_createClass(Engine,[{key:\"updatePreviousStatus\",value:function updatePreviousStatus(number,input){this.previousNumber=number;this.previousInput=input;this.previousOperation=input;}// Handle and process all digit inputs including .\n},{key:\"handleDigitInput\",value:function handleDigitInput(input){this.clearable=true;if(this.isOperation(this.previousInput)){this.number=\"\";}if(input===\".\"&&this.containDecimalPoint(this.number)){return this.number;}if(input===\".\"&&this.number===\"\"){this.number=\"0.\";return this.number;}this.number+=input;this.previousInput=input;return this.removeZero(this.number);}// Handle all operation other than digit inputs.\n},{key:\"handleOperationInput\",value:function handleOperationInput(input){if(input===this.OperationEnum.addition||input===this.OperationEnum.subtraction||input===this.OperationEnum.multiplication||input===this.OperationEnum.division){return this.handleBaiscMathOperation(input);}if(input===this.OperationEnum.percentage){return this.handlePercentageOperation();}if(input===this.OperationEnum.sign){return this.handleSignOperation();}if(input===this.OperationEnum.allClear){return this.handleAllClearOperation();}if(input===this.OperationEnum.clear){return this.handleClearOperation();}if(input===this.OperationEnum.equal){return this.handleEqualOperation(input);}}// Only handle basic +, -, /, x operations\n},{key:\"handleBaiscMathOperation\",value:function handleBaiscMathOperation(input){this.repeatNumber=null;this.repeatOperation=null;if(this.previousNumber==null){this.updatePreviousStatus(this.number,input);return this.number;}else{var temp=this.previousInput;this.previousInput=input;if(temp!==input&&this.previousOperation!==this.OperationEnum.equal&&temp!==\"=\"){if(this.previousOperation===this.OperationEnum.addition){this.number=this.add(this.previousNumber,this.number);}if(this.previousOperation===this.OperationEnum.subtraction){this.number=this.subtract(this.previousNumber,this.number);}if(this.previousOperation===this.OperationEnum.multiplication){this.number=this.muliply(this.previousNumber,this.number);}if(this.previousOperation===this.OperationEnum.division){this.number=this.divide(this.previousNumber,this.number);}this.updatePreviousStatus(this.number,input);return this.number;}else{this.updatePreviousStatus(this.number,input);return this.number;}}}},{key:\"handlePercentageOperation\",value:function handlePercentageOperation(){if(this.number===\"\"){this.number=\"0\";}this.number=this.percentage(this.number);return this.number;}},{key:\"handleSignOperation\",value:function handleSignOperation(){if(this.number===\"\"){this.number=\"0\";}this.number=this.changeSign(this.number);return this.number;}},{key:\"handleAllClearOperation\",value:function handleAllClearOperation(){return this.allClear();}},{key:\"handleClearOperation\",value:function handleClearOperation(){return this.clear();}// Paramter operation is one of add, subtract, multiply or divide\n},{key:\"perform\",value:function perform(operation){if(this.repeatNumber!==null){this.number=operation(this.number,this.repeatNumber);}else{this.repeatNumber=this.number;this.number=operation(this.previousNumber,this.number);}}},{key:\"handleEqualOperation\",value:function handleEqualOperation(input){if(this.previousNumber==null){this.updatePreviousStatus(this.number,input);return this.number;}else{this.previousInput=input;if(this.previousOperation!==this.OperationEnum.equal&&input===this.OperationEnum.equal){var temp=this.number;if(this.previousOperation===this.OperationEnum.addition){this.perform(this.add);}if(this.previousOperation===this.OperationEnum.subtraction){this.perform(this.subtract);}if(this.previousOperation===this.OperationEnum.multiplication){this.perform(this.muliply);}if(this.previousOperation===this.OperationEnum.division){this.perform(this.divide);}this.repeatNumber=temp;this.repeatOperation=this.previousOperation;this.previousInput=input;this.previousOperation=input;return this.number;}else{var _temp=this.number;if(this.repeatNumber!=null){if(this.repeatOperation===this.OperationEnum.addition){this.number=this.add(this.number,this.repeatNumber);}if(this.repeatOperation===this.OperationEnum.subtraction){this.number=this.subtract(this.number,this.repeatNumber);}if(this.repeatOperation===this.OperationEnum.multiplication){this.number=this.muliply(this.number,this.repeatNumber);}if(this.repeatOperation===this.OperationEnum.division){this.number=this.divide(this.number,this.repeatNumber);}}this.updatePreviousStatus(_temp,input);return this.number;}}}},{key:\"calculate\",value:function calculate(input){if(this.isDigit(input)){return this.handleDigitInput(input);}if(this.isOperation(input)){return this.handleOperationInput(input);}return\"Error\";}},{key:\"isDigit\",value:function isDigit(input){return!isNaN(input)||input===\".\";}},{key:\"isOperation\",value:function isOperation(input){return Object.values(this.OperationEnum).includes(input);}},{key:\"add\",value:function add(previousNumber,number){return(parseFloat(previousNumber)+parseFloat(number)).toString();}},{key:\"subtract\",value:function subtract(previousNumber,number){return(parseFloat(previousNumber)-parseFloat(number)).toString();}},{key:\"muliply\",value:function muliply(previousNumber,number){return(parseFloat(previousNumber)*parseFloat(number)).toString();}},{key:\"divide\",value:function divide(previousNumber,number){return(parseFloat(previousNumber)/parseFloat(number)).toString();}},{key:\"percentage\",value:function percentage(number){return(parseFloat(number)/100).toString();}},{key:\"changeSign\",value:function changeSign(number){return parseFloat(number)===0?\"0\":(parseFloat(number)*-1).toString();}},{key:\"clear\",value:function clear(){this.previousInput=null;this.previousNumber=null;this.previousOperation=null;this.repeatNumber=null;this.repeatOperation=null;this.clearable=false;return this.number;}},{key:\"allClear\",value:function allClear(){this.number=\"\";this.previousInput=null;this.previousNumber=null;this.previousOperation=null;this.repeatNumber=null;this.repeatOperation=null;this.clearable=false;return\"0\";}},{key:\"removeZero\",value:function removeZero(number){if(number.length>1&&number[0]===\"0\"&&number[1]!==\".\"){return this.removeZero(number.substr(1,number.length));}return number;}},{key:\"containDecimalPoint\",value:function containDecimalPoint(number){return number.includes(\".\");}}]);return Engine;}();export default Engine;","map":{"version":3,"sources":["/Users/raza/Downloads/khadyo_source_code/client/src/resources/restaurant/auth/pos/calc/Engine.js"],"names":["Engine","number","previousInput","previousNumber","previousOperation","repeatNumber","repeatOperation","clearable","OperationEnum","addition","subtraction","multiplication","division","percentage","sign","equal","allClear","input","isOperation","containDecimalPoint","removeZero","handleBaiscMathOperation","handlePercentageOperation","handleSignOperation","handleAllClearOperation","clear","handleClearOperation","handleEqualOperation","updatePreviousStatus","temp","add","subtract","muliply","divide","changeSign","operation","perform","isDigit","handleDigitInput","handleOperationInput","isNaN","Object","values","includes","parseFloat","toString","length","substr"],"mappings":"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","sourcesContent":["class Engine {\r\n  constructor() {\r\n    this.number = \"\";\r\n\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    this.OperationEnum = {\r\n      addition: \"+\",\r\n      subtraction: \"-\",\r\n      multiplication: \"x\",\r\n      division: \"\\u00F7\",\r\n      percentage: \"%\",\r\n      sign: \"+/-\",\r\n      equal: \"=\",\r\n      allClear: \"AC\",\r\n      allClear: \"C\",\r\n    };\r\n  }\r\n\r\n  updatePreviousStatus(number, input) {\r\n    this.previousNumber = number;\r\n    this.previousInput = input;\r\n    this.previousOperation = input;\r\n  }\r\n\r\n  // Handle and process all digit inputs including .\r\n  handleDigitInput(input) {\r\n    this.clearable = true;\r\n\r\n    if (this.isOperation(this.previousInput)) {\r\n      this.number = \"\";\r\n    }\r\n\r\n    if (input === \".\" && this.containDecimalPoint(this.number)) {\r\n      return this.number;\r\n    }\r\n\r\n    if (input === \".\" && this.number === \"\") {\r\n      this.number = \"0.\";\r\n      return this.number;\r\n    }\r\n\r\n    this.number += input;\r\n\r\n    this.previousInput = input;\r\n\r\n    return this.removeZero(this.number);\r\n  }\r\n\r\n  // Handle all operation other than digit inputs.\r\n  handleOperationInput(input) {\r\n    if (\r\n      input === this.OperationEnum.addition ||\r\n      input === this.OperationEnum.subtraction ||\r\n      input === this.OperationEnum.multiplication ||\r\n      input === this.OperationEnum.division\r\n    ) {\r\n      return this.handleBaiscMathOperation(input);\r\n    }\r\n\r\n    if (input === this.OperationEnum.percentage) {\r\n      return this.handlePercentageOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.sign) {\r\n      return this.handleSignOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.allClear) {\r\n      return this.handleAllClearOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.clear) {\r\n      return this.handleClearOperation();\r\n    }\r\n\r\n    if (input === this.OperationEnum.equal) {\r\n      return this.handleEqualOperation(input);\r\n    }\r\n  }\r\n\r\n  // Only handle basic +, -, /, x operations\r\n  handleBaiscMathOperation(input) {\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n\r\n    if (this.previousNumber == null) {\r\n      this.updatePreviousStatus(this.number, input);\r\n\r\n      return this.number;\r\n    } else {\r\n      let temp = this.previousInput;\r\n      this.previousInput = input;\r\n\r\n      if (\r\n        temp !== input &&\r\n        this.previousOperation !== this.OperationEnum.equal &&\r\n        temp !== \"=\"\r\n      ) {\r\n        if (this.previousOperation === this.OperationEnum.addition) {\r\n          this.number = this.add(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.subtraction) {\r\n          this.number = this.subtract(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.multiplication) {\r\n          this.number = this.muliply(this.previousNumber, this.number);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.division) {\r\n          this.number = this.divide(this.previousNumber, this.number);\r\n        }\r\n\r\n        this.updatePreviousStatus(this.number, input);\r\n\r\n        return this.number;\r\n      } else {\r\n        this.updatePreviousStatus(this.number, input);\r\n\r\n        return this.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  handlePercentageOperation() {\r\n    if (this.number === \"\") {\r\n      this.number = \"0\";\r\n    }\r\n\r\n    this.number = this.percentage(this.number);\r\n\r\n    return this.number;\r\n  }\r\n\r\n  handleSignOperation() {\r\n    if (this.number === \"\") {\r\n      this.number = \"0\";\r\n    }\r\n\r\n    this.number = this.changeSign(this.number);\r\n\r\n    return this.number;\r\n  }\r\n\r\n  handleAllClearOperation() {\r\n    return this.allClear();\r\n  }\r\n\r\n  handleClearOperation() {\r\n    return this.clear();\r\n  }\r\n\r\n  // Paramter operation is one of add, subtract, multiply or divide\r\n  perform(operation) {\r\n    if (this.repeatNumber !== null) {\r\n      this.number = operation(this.number, this.repeatNumber);\r\n    } else {\r\n      this.repeatNumber = this.number;\r\n      this.number = operation(this.previousNumber, this.number);\r\n    }\r\n  }\r\n\r\n  handleEqualOperation(input) {\r\n    if (this.previousNumber == null) {\r\n      this.updatePreviousStatus(this.number, input);\r\n\r\n      return this.number;\r\n    } else {\r\n      this.previousInput = input;\r\n\r\n      if (\r\n        this.previousOperation !== this.OperationEnum.equal &&\r\n        input === this.OperationEnum.equal\r\n      ) {\r\n        let temp = this.number;\r\n\r\n        if (this.previousOperation === this.OperationEnum.addition) {\r\n          this.perform(this.add);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.subtraction) {\r\n          this.perform(this.subtract);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.multiplication) {\r\n          this.perform(this.muliply);\r\n        }\r\n        if (this.previousOperation === this.OperationEnum.division) {\r\n          this.perform(this.divide);\r\n        }\r\n\r\n        this.repeatNumber = temp;\r\n        this.repeatOperation = this.previousOperation;\r\n        this.previousInput = input;\r\n        this.previousOperation = input;\r\n\r\n        return this.number;\r\n      } else {\r\n        let temp = this.number;\r\n\r\n        if (this.repeatNumber != null) {\r\n          if (this.repeatOperation === this.OperationEnum.addition) {\r\n            this.number = this.add(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.subtraction) {\r\n            this.number = this.subtract(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.multiplication) {\r\n            this.number = this.muliply(this.number, this.repeatNumber);\r\n          }\r\n          if (this.repeatOperation === this.OperationEnum.division) {\r\n            this.number = this.divide(this.number, this.repeatNumber);\r\n          }\r\n        }\r\n\r\n        this.updatePreviousStatus(temp, input);\r\n\r\n        return this.number;\r\n      }\r\n    }\r\n  }\r\n\r\n  calculate(input) {\r\n    if (this.isDigit(input)) {\r\n      return this.handleDigitInput(input);\r\n    }\r\n\r\n    if (this.isOperation(input)) {\r\n      return this.handleOperationInput(input);\r\n    }\r\n\r\n    return \"Error\";\r\n  }\r\n\r\n  isDigit(input) {\r\n    return !isNaN(input) || input === \".\";\r\n  }\r\n\r\n  isOperation(input) {\r\n    return Object.values(this.OperationEnum).includes(input);\r\n  }\r\n\r\n  add(previousNumber, number) {\r\n    return (parseFloat(previousNumber) + parseFloat(number)).toString();\r\n  }\r\n\r\n  subtract(previousNumber, number) {\r\n    return (parseFloat(previousNumber) - parseFloat(number)).toString();\r\n  }\r\n\r\n  muliply(previousNumber, number) {\r\n    return (parseFloat(previousNumber) * parseFloat(number)).toString();\r\n  }\r\n\r\n  divide(previousNumber, number) {\r\n    return (parseFloat(previousNumber) / parseFloat(number)).toString();\r\n  }\r\n\r\n  percentage(number) {\r\n    return (parseFloat(number) / 100).toString();\r\n  }\r\n\r\n  changeSign(number) {\r\n    return parseFloat(number) === 0\r\n      ? \"0\"\r\n      : (parseFloat(number) * -1).toString();\r\n  }\r\n\r\n  clear() {\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    return this.number;\r\n  }\r\n\r\n  allClear() {\r\n    this.number = \"\";\r\n    this.previousInput = null;\r\n    this.previousNumber = null;\r\n    this.previousOperation = null;\r\n    this.repeatNumber = null;\r\n    this.repeatOperation = null;\r\n    this.clearable = false;\r\n\r\n    return \"0\";\r\n  }\r\n\r\n  removeZero(number) {\r\n    if (number.length > 1 && number[0] === \"0\" && number[1] !== \".\") {\r\n      return this.removeZero(number.substr(1, number.length));\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  containDecimalPoint(number) {\r\n    return number.includes(\".\");\r\n  }\r\n}\r\n\r\nexport default Engine;\r\n"]},"metadata":{},"sourceType":"module"}