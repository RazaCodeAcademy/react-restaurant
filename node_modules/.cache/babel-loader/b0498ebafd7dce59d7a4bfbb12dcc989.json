{"ast":null,"code":"var _jsxFileName = \"/Users/raza/Downloads/khadyo_source_code/client/src/resources/restaurant/auth/pos/calc/Display.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Display.css\";\n\nclass Display extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: props.display,\n      width: window.width\n    };\n    this.divRef = React.createRef();\n    this.spanRef = React.createRef();\n    this.previousWidth = window.width;\n  }\n\n  updateDimensions() {\n    this.setState({ ...this.state,\n      width: window.innerWidth\n    });\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.divRef,\n      className: \"Display\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      ref: this.spanRef,\n      className: \"DisplaySpan\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }, this.props.display));\n  }\n\n  componentDidUpdate() {\n    let divWidth = this.divRef.current.clientWidth;\n    this.previousWidth = divWidth;\n  }\n\n}\n\nDisplay.propTypes = {\n  display: PropTypes.string\n};\nexport default Display;","map":{"version":3,"sources":["/Users/raza/Downloads/khadyo_source_code/client/src/resources/restaurant/auth/pos/calc/Display.js"],"names":["React","PropTypes","Display","Component","constructor","props","state","display","width","window","divRef","createRef","spanRef","previousWidth","updateDimensions","setState","innerWidth","componentDidMount","addEventListener","bind","componentWillUnmount","removeEventListener","render","componentDidUpdate","divWidth","current","clientWidth","propTypes","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,eAAP;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACG,SAA5B,CAAsC;AACpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,OAAO,EAAEF,KAAK,CAACE,OAAjB;AAA0BC,MAAAA,KAAK,EAAEC,MAAM,CAACD;AAAxC,KAAb;AAEA,SAAKE,MAAL,GAAcV,KAAK,CAACW,SAAN,EAAd;AACA,SAAKC,OAAL,GAAeZ,KAAK,CAACW,SAAN,EAAf;AAEA,SAAKE,aAAL,GAAqBJ,MAAM,CAACD,KAA5B;AACD;;AAEDM,EAAAA,gBAAgB,GAAG;AACjB,SAAKC,QAAL,CAAc,EAAE,GAAG,KAAKT,KAAV;AAAiBE,MAAAA,KAAK,EAAEC,MAAM,CAACO;AAA/B,KAAd;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClBR,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkC,KAAKJ,gBAAL,CAAsBK,IAAtB,CAA2B,IAA3B,CAAlC;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBX,IAAAA,MAAM,CAACY,mBAAP,CAA2B,QAA3B,EAAqC,KAAKP,gBAAL,CAAsBK,IAAtB,CAA2B,IAA3B,CAArC;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,GAAG,EAAE,KAAKZ,MAAf;AAAuB,MAAA,SAAS,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAM,MAAA,GAAG,EAAE,KAAKE,OAAhB;AAAyB,MAAA,SAAS,EAAC,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKP,KAAL,CAAWE,OADd,CADF,CADF;AAOD;;AAEDgB,EAAAA,kBAAkB,GAAG;AACnB,QAAIC,QAAQ,GAAG,KAAKd,MAAL,CAAYe,OAAZ,CAAoBC,WAAnC;AACA,SAAKb,aAAL,GAAqBW,QAArB;AACD;;AArCmC;;AAwCtCtB,OAAO,CAACyB,SAAR,GAAoB;AAClBpB,EAAAA,OAAO,EAAEN,SAAS,CAAC2B;AADD,CAApB;AAIA,eAAe1B,OAAf","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Display.css\";\r\n\r\nclass Display extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { display: props.display, width: window.width };\r\n\r\n    this.divRef = React.createRef();\r\n    this.spanRef = React.createRef();\r\n\r\n    this.previousWidth = window.width;\r\n  }\r\n\r\n  updateDimensions() {\r\n    this.setState({ ...this.state, width: window.innerWidth });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div ref={this.divRef} className=\"Display\">\r\n        <span ref={this.spanRef} className=\"DisplaySpan\">\r\n          {this.props.display}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    let divWidth = this.divRef.current.clientWidth;\r\n    this.previousWidth = divWidth;\r\n  }\r\n}\r\n\r\nDisplay.propTypes = {\r\n  display: PropTypes.string,\r\n};\r\n\r\nexport default Display;\r\n"]},"metadata":{},"sourceType":"module"}